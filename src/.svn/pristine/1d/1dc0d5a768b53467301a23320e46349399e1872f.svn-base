package Server;

import Login.User;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.Socket;
import java.util.Date;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;


public class ServerThread implements Callable<Void> {

    private Socket connection;
    private User connectedUser;
    private final static Logger auditLogger = Logger.getLogger("requests");
    private final static Logger errorLogger = Logger.getLogger("errors");

    public ServerThread(Socket connection) {
        this.connection = connection;
    }

    public ServerThread(Socket connection, User connectedUser) {
        this.connection = connection;
        this.connectedUser = connectedUser;
    }

    @Override
    public Void call() {
        try {
            auditLogger.info( "Connected to: " + connection.getRemoteSocketAddress() + " on " + new Date());
            Writer out = new OutputStreamWriter(connection.getOutputStream());
            out.write("Hello\r\n");
            out.flush();
        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
            try {
                connection.close();
            } catch (IOException e) {

            }
        }
        return null;
    }

    public static void closeSilently(Socket socket) {
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException ex) {
                errorLogger.log(Level.SEVERE, "could not close connection", ex);
            }
        }
    }
}

